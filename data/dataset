import os
import sys

# ✅ Ensure Python can find 'data.dataset'
sys.path.append('/content/CbamDenseUnet')

# Directory for data
data_dir = '/content/CbamDenseUnet/data'
os.makedirs(data_dir, exist_ok=True)

# Create only dataset.py (NOT __init__.py)
dataset_path = os.path.join(data_dir, 'dataset.py')
if not os.path.exists(dataset_path):
    with open(dataset_path, 'w') as f:
        f.write("""\
import os
from PIL import Image
from torch.utils.data import Dataset
import torchvision.transforms as transforms

class PairedDataset(Dataset):
    def __init__(self, low_light_dir, normal_light_dir, transform=None):
        self.low_light_dir = low_light_dir
        self.normal_light_dir = normal_light_dir
        self.low_images = sorted(os.listdir(low_light_dir))
        self.normal_images = sorted(os.listdir(normal_light_dir))
        self.transform = transform or transforms.Compose([
            transforms.Resize((224, 224)),
            transforms.ToTensor()
        ])

    def __len__(self):
        return min(len(self.low_images), len(self.normal_images))

    def __getitem__(self, idx):
        low_img_path = os.path.join(self.low_light_dir, self.low_images[idx])
        normal_img_path = os.path.join(self.normal_light_dir, self.normal_images[idx])
        low_img = Image.open(low_img_path).convert('RGB')
        normal_img = Image.open(normal_img_path).convert('RGB')
        if self.transform:
            low_img = self.transform(low_img)
            normal_img = self.transform(normal_img)
        return {'low': low_img, 'normal': normal_img}

class UnpairedDataset(Dataset):
    def __init__(self, image_dir, transform=None):
        self.image_dir = image_dir
        self.images = sorted(os.listdir(image_dir))
        self.transform = transform or transforms.Compose([
            transforms.Resize((224, 224)),
            transforms.ToTensor()
        ])

    def __len__(self):
        return len(self.images)

    def __getitem__(self, idx):
        img_path = os.path.join(self.image_dir, self.images[idx])
        image = Image.open(img_path).convert('RGB')
        if self.transform:
            image = self.transform(image)
        return {'image': image}
""")

print("✅ Created dataset.py (without __init__.py) in:", data_dir)
