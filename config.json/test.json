import os
import torch
from torchvision import transforms
from PIL import Image
# -------- Paths --------
input_dir = "/content/cvccolondbsplit/train/low"            # Path to low-light training images
output_dir = "/content/outputs/train_enhanced"              # Output folder for enhanced training images
model_path = "/content/saved_models/cbam_denseunet.pt"      # Trained model (.pt)
# -------- Create output directory if it doesn't exist --------
os.makedirs(output_dir, exist_ok=True)
# -------- Setup device --------
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
# -------- Load model (full model if saved with torch.save(model)) --------
model.load_state_dict(torch.load(model_path, map_location=device))
model = model.to(device)
model.eval()
# -------- Define preprocessing and postprocessing --------
transform = transforms.Compose([
    transforms.Resize((224, 224)),  # Optional: match model input size
    transforms.ToTensor()
])
to_pil = transforms.ToPILImage()
# -------- Enhance and save training images --------
with torch.no_grad():
    for fname in os.listdir(input_dir):
        if fname.lower().endswith(('.jpg', '.jpeg', '.png')):
            img_path = os.path.join(input_dir, fname)
            img = Image.open(img_path).convert('RGB')
            inp = transform(img).unsqueeze(0).to(device)
            out = model(inp).squeeze().cpu().clamp(0, 1)  # Clamp to [0,1] range
            out_img = to_pil(out)
            out_img.save(os.path.join(output_dir, fname))
            print(f"âœ… Enhanced: {fname}")
print("ðŸŽ‰ Training image enhancement complete. Saved to:", output_dir)
